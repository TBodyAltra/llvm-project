//===-- TINYGPUISelDAGToDAG.cpp - A dag to dag inst selector for TINYGPU ------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the TINYGPU target.
//
//===----------------------------------------------------------------------===//

#include "TINYGPU.h"
#include "MCTargetDesc/TINYGPUMCTargetDesc.h"
#include "TINYGPUTargetMachine.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/MathExtras.h"
#include "llvm/Support/raw_ostream.h"
using namespace llvm;

#define DEBUG_TYPE "tinygpu-isel"

// TINYGPU-specific code to select TINYGPU machine instructions for
// SelectionDAG operations.
namespace {
class TINYGPUDAGToDAGISel final : public SelectionDAGISel {
public:
  static char ID;
  explicit TINYGPUDAGToDAGISel(TINYGPUTargetMachine &TargetMachine)
      : SelectionDAGISel(ID, TargetMachine) {}

  StringRef getPassName() const override {
    return "TINYGPU DAG->DAG Pattern Instruction Selection";
  }

  MachineSDNode *buildMovImm8(SDLoc &DL, uint8_t Imm, EVT VT) const;

  void Select(SDNode *Node) override;

// Include the pieces autogenerated from the target description.
#include "TINYGPUGenDAGISel.inc"
};
}

void TINYGPUDAGToDAGISel::Select(SDNode *Node) {
  // If we have a custom node, we have already selected
  if (Node->isMachineOpcode()) {
    LLVM_DEBUG(dbgs() << "== "; Node->dump(CurDAG); dbgs() << "\n");
    Node->setNodeId(-1);
    return;
  }

  unsigned int Opc = Node->getOpcode();
  switch (Opc) {
  default:
    break;
  case ISD::Constant:
    uint8_t Imm;
    ConstantSDNode *C = cast<ConstantSDNode>(Node);
    Imm = C->getZExtValue();
    SDLoc DL(Node);
    ReplaceNode(Node, buildMovImm8(DL, Imm, Node->getValueType(0)));
    return;
  }

  // Select the default instruction.
  SelectCode(Node);
}

MachineSDNode *TINYGPUDAGToDAGISel::buildMovImm8(SDLoc &DL, uint8_t Imm, EVT Vt) const {
  auto *N = CurDAG->getMachineNode(
    TINYGPU::CONST, DL, MVT::i8,
    CurDAG->getTargetConstant(Imm & 0xFFFF, DL, MVT::i8)
  );
  return N;
}

char TINYGPUDAGToDAGISel::ID = 0;

// This pass converts a legalized DAG into a TINYGPU-specific DAG, ready
// for instruction scheduling.
FunctionPass *llvm::createTINYGPUISelDag(TINYGPUTargetMachine &TM) {
  return new TINYGPUDAGToDAGISel(TM);
}